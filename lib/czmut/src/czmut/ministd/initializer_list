#pragma once
	
////////////////////////////////////////////////////////////
//   What would normally come from <initializer_lis>
////////////////////////////////////////////////////////////

namespace std
{

	template<typename T>
	class initializer_list
	{
	public:
		using value_type		= T;
		using reference			= const T&;
		using const_reference	= const T&;
		using size_type			= size_t;

		using iterator			= const T*;
		using const_iterator	= const T*;

	private:
		iterator data;
		size_type len;

	public:
		
		constexpr initializer_list(const_iterator first, size_type len) noexcept
			: data(first), len(len)
		{
		}

		constexpr initializer_list(const_iterator first, const_iterator last) noexcept
			: data(first), len(last-first)
		{
		}
		
		constexpr initializer_list() noexcept : data(nullptr), len(0)
		{
		}
		constexpr size_type size() const noexcept
		{
				return len;
		}
		constexpr const_iterator begin() const noexcept
		{
				return data;
		}
		constexpr const_iterator end() const noexcept
		{
				return data + size();
		}
	};
	
	template<class T>
	constexpr const T* begin(initializer_list<T> il) noexcept
	{
			return il.begin();
	}

	template<class T>
	constexpr const T* end(initializer_list<T> il) noexcept
	{
			return il.end();
	}
}
